{"version":3,"file":"gc.js","sources":["../src/gc/utils/NumberSet.js","../src/gc/utils/_tests/numberTestSpec.js"],"sourcesContent":["const CHUNK_SIZE = 24;\nconst CHUNK_MASK = 0xffffff;\n\n/**\n * Make an instance of this class to track the boolean state of a range of\n * integers from 0 to an upper bound. You can perform a number of set operators\n * with this class such as union, intersection and difference\n */\nexport default class NumberSet\n{\n\t/**\n\t *\n\t * @param {Array.<Number>} bits the initial value of the set, each number in\n\t * \t\tthis array is a bit that will be included\n\t * @param {*} length the number of bits in the set. The range will from 0 to\n\t * \t\tlength - 1;\n\t */\n\tconstructor(bits, length) {\n\t\tthis.length = length ? length : 1024;\n\t\tthis.chunkCount = Math.ceil(this.length / CHUNK_SIZE);\n\t\tthis.chunks = [];\n\t\tthis.chunks = this.arrayPad(this.chunks, this.chunkCount, 0);\n\t\tthis.assign(bits);\n\t}\n\n\n\t/**\n\t * Call this method to remove all numbers from the set\n\t */\n\tclear() {\n\t\tthis.chunks = [];\n\t\tthis.chunks = this.arrayPad(this.chunks, this.chunkCount, 0)\n\t}\n\n\t/**\n\t * Call this method to expand an array to the given size and fill the empty\n\t * space with a new value.\n\t *\n\t * @private\n\t * @param {Array} array the array to expand\n\t * @param {Number} count the new size of the array\n\t * @param {*} value the value to fill the new array space with\n\t *\n\t * @returns {Array} the expanded array\n\t */\n\tarrayPad(array, count, value) {\n\t\tfor (var idx = array.length; idx < count; idx++)\n\t\t\tarray.push(value)\n\t\treturn array;\n\t}\n\n\t/**\n\t * Call this method to check if the set is empty\n\t *\n\t * @returns true if the set is empty\n\t */\n\tisEmpty() {\n\t\tfor (var idx = 0; idx < this.chunks.length; idx++)\n\t\t\tif (this.chunks[idx] != 0) return false;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Call this method to add the given bits to the set. It will not empty the\n\t * set first\n\t *\n\t * @param {Array.<Number} bits an array of bits to turn on\n\t */\n\tassign(bits) {\n\t\tfor (var idx = 0; idx < bits.length; idx++)\n\t\t\tthis.include(bits[idx]);\n\t}\n\n\t/**\n\t * Call this method to add a number to the set\n\t *\n\t * @param {Number} value the number to add to the set\n\t */\n\tinclude(value) {\n\t\tthis.chunks[Math.floor(value / CHUNK_SIZE)] |= (1 << (value % CHUNK_SIZE));\n\t\treturn this;\n\t}\n\n\t/**\n\t * Call this method to remove a number from the set\n\t *\n\t * @param {Number} value the number to remove from the set\n\t */\n\t exclude(value) {\n\t\tthis.chunks[Math.floor(value / CHUNK_SIZE)] &= (~(1 << (value % CHUNK_SIZE))) & CHUNK_MASK;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Call this method to test if the given number is in the set\n\t *\n\t * @param {Number} value the number to check\n\t * @returns {Boolean} true if the number is in the set\n\t */\n\thas(value) {\n\t\tvar result = ((this.chunks[Math.floor(value / CHUNK_SIZE)]) & (1 << (value % CHUNK_SIZE)))\n\t\treturn result != 0;\n\t}\n\n\t/**\n\t * Call this method to produce the union of two sets. This method modifies\n\t * this set, but leaves the passed set untouched. A union includes all the\n\t * number from both sets\n\t *\n\t * @param {NumberSet} set the set to perform a union with.\n\t */\n\tunion(set) {\n\t\tfor (var idx = 0; idx < this.chunks.length; idx++)\n\t\t\tthis.chunks[idx] |= set.chunks[idx];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Call this method to produce the intersection of two sets. This method\n\t * modifies this set, but leaves the other untouched. The intersection of\n\t * sets includes only the numbers that both sets have in common\n\t * @param {NumberSet} set the set to perform the intersection on\n\t */\n\tintersection(set) {\n\t\tfor (var idx = 0; idx < this.chunks.length; idx++)\n\t\t\tthis.chunks[idx] &= set.chunks[$idx];\n\t\treturn this;\n\t}\n\n\t/**\n\t * Call this method to produce the difference of two sets. This method\n\t * modifies this set but leaves the other untouched. The difference of sets\n\t * is only those numbers that exist in the first but not the second.\n\t *\n\t * @param {NumberSet} set\n\t */\n\tdifference(set) {\n\t\tfor (var idx = 0; idx < this.chunks.length; idx++)\n\t\t\tthis.chunks[idx] &= (~set.chunks[idx]) & CHUNK_MASK;\n\t\treturn this;\n\t}\n};\n","import NumberSet from \"utils/NumberSet.js\";\n\ndescribe('Number Set', function() {\n\tit('should create an empty set', function() {\n\t\tvar set = new NumberSet([], 240);\n\n\t\texpect(set.chunkCount).toBe(10);\n\n\t\tfor (let idx = 0; idx < set.chunkCount; idx++) {\n\t\t\texpect(set.chunks[idx]).toBe(0)\n\t\t}\n\t})\n})\n"],"names":["CHUNK_SIZE","CHUNK_MASK","NumberSet","constructor","bits","length","chunkCount","Math","ceil","chunks","arrayPad","assign","clear","array","count","value","idx","push","isEmpty","include","floor","exclude","has","result","union","set","intersection","$idx","difference","describe","it","expect","toBe"],"mappings":"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"}